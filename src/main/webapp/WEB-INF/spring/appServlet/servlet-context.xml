<?xml version="1.0" encoding="UTF-8"?>
<!--
    servlet-context.xml
    Spring MVC의 DispatcherServlet이 사용하는 설정 파일입니다.
    주로 컨트롤러, 뷰 리졸버, 리소스 처리 등의 웹 계층 설정을 포함합니다.
-->

<beans:beans xmlns="http://www.springframework.org/schema/mvc"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:context="http://www.springframework.org/schema/context"
             xsi:schemaLocation="
                http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
                http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!--
        DispatcherServlet Context: 이 파일은 DispatcherServlet이 사용하는 설정 파일입니다.
        DispatcherServlet은 클라이언트 요청을 받아 Controller로 전달하는 역할을 합니다.
    -->

    <!--
        annotation-driven 설정:
        @Controller, @RequestMapping 등과 같은 어노테이션을 사용하여 컨트롤러를 설정할 수 있게 해줍니다.
        내부적으로 HandlerMapping, HandlerAdapter 등을 자동으로 등록해줍니다.
    -->
    <annotation-driven />

    <!--
        정적 리소스 경로 설정:
        클라이언트가 /resources/** 경로로 요청을 보내면,
        /webapp/resources/ 디렉토리에 있는 정적 파일(CSS, JS, 이미지 등)을 찾아서 응답합니다.
        예: /resources/style.css → /webapp/resources/style.css
    -->
    <resources mapping="/resources/**" location="/resources/" />

    <!--
        InternalResourceViewResolver 설정:
        컨트롤러에서 반환한 논리적인 뷰 이름을 실제 JSP 파일 경로로 변환해주는 역할을 합니다.
        예를 들어 컨트롤러가 "home"을 반환하면,
        prefix + viewName + suffix = "/WEB-INF/views/home.jsp" 로 찾아갑니다.
    -->
    <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <beans:property name="prefix" value="/WEB-INF/views/" />
        <beans:property name="suffix" value=".jsp" />
    </beans:bean>

    <!--
        component-scan 설정:
        지정된 패키지(kr.ac.hansung.cse.controller) 아래에 있는 클래스 중
        @Controller, @Service, @Repository, @Component 어노테이션이 붙은 클래스들을 스프링이 자동으로 빈으로 등록해줍니다.
        여기서는 컨트롤러 클래스들을 스캔하여 DispatcherServlet과 연동되도록 설정합니다.
    -->
    <context:component-scan base-package="kr.ac.hansung.cse.controller" />

</beans:beans>